1.
C#-컴포넌트 지향 프로그래밍 언어로 자바의 단점을 보완하는 언어
.NET 프레임워크 위에서 실행되며 범용성이 좋은 객체지향언어이다
타입과 문법이 엄격하다


3.
private-정의된 형식에 대해서만 접근 가능하다 

public class UserInfo {
    public String Name;//외부에서의 모든 접근 허용
    private String UserID;//클래스 외부에서는 접근 불가능
}

-------------------------------------------------
protected- 기능추가, 보완등을 위해 상속클래스 및 선언클래스에서만 접근가능한 접근한정자
pulbic class MyParentClass
{
    public string name;
    protected int age; // 상속받는 클래스에서 접근 가능함
}
 

public class MyChildClass : MyParentClass // MyParentClass 상속받음
{
    public void ChangeAge(int val)
    {
        age = val; // 부모인 MyParentClass의 age 변수에 접근 가능함
    }
}
-------------------------------------------------
internal- 외부에서의 접근은 제한하고 어셈블리에서는 public과 같은 효과를
갖게 한다.
namespace-같은 그룹의 클래스를 묶는 도구
// Assembly : MyProject
namespace MyProject
{
    internal class MyClass
    {
        public string name;
    }
}
 

// Assembly : MyProject
namespace MyProject
{
    public class MyNewClass
    {
        MyClass c1 = new MyClass(); // 같은 어셈블리에서 접근 가능
        c1.name = "SynK"; 
    }
}
 

// Assembly : YourProject
namespace YourProject
{
    public class YourClass
    {
        MyClass c1 = new MyClass(); // 다른 어셈블리에서 인터널 클래스 접근 불가 
    }
}
-------------------------------------------------
public-클래스의 내부, 외부 모든 곳에서 접근이 가능하다
public class MyClass
{
    public string name;
}
4.메소드에 대한 참조를 델리게이트라고 부른다
델리게이트에 메소드 주소를 할당한 후 델리게이트를 호출하면 이 델리게이트가 메소드를 호출하게 된다

using System;
namespace Delegate
{
	delegate int MyDelegate( int a, int b);
	class Calculator
	{
	public int Plus(int a, int b)
	{
	return a + b;
	}
	public static int Minus(int a, int b)
	{
	return a - b;
	}
}
--------------------------------------------------------
class MainApp
{
static void Main(string[] args)
	{
	Calculator Calc = new Calculator();
	MyDelegate Callback;
	Callback = new MyDelegate( Calc.Plus );
	Console.WriteLine(Callback(3, 4));
	Callback = new MyDelegate(Calculator.Minus);
	Console.WriteLine(Callback(7, 5));
	}
}
}
---------------------------------------------------------
5.사용자 행동에 의해 발생하면 사건이 발생했다는걸 알리는 메시지.
C#에서는 델리게이트를 이용하여 이벤트를 처리한다.

using System;
namespace EventHandlingApp{
public delegate void MyEventHandler(); // 1. 이벤트를 위한 델리게이트 정의
class Button
{
public event MyEventHandler Push; // 2. 이벤트 선언
public void OnPush()
{
if (Push != null)
Push(); // 5. 이벤트 발생
}
}
class EventHandlerClass {
public void MyMethod() // 3. 이벤트 처리기 작성
{ 
Console.WriteLine("In the EventHandlerClass.MyMethod ...");
}
}
class Program {
public static void Main() {
Button button = new Button();
EventHandlerClass obj = new EventHandlerClass();
button.Push += new MyEventHandler(obj.MyMethod); // 4. 등록
button.OnPush();
}
}
}
---------------------------------------------------
6.베이스 클래스의 모든 멤버들이 파생클래스로 전달되는 기능으로
:을 사용 하여 나타내며 C#은 단일 상속이다
베이스 클래스의 생성자가 먼저 실행이 되고 그 다음에 파생클래스의 생성자가 실행된다



using System;
namespace HiddenNameApp
{
class BaseClass
{
protected int a = 1;
protected int b = 2;
}
class DerivedClass : BaseClass
{
new int a = 3;
new double b = 4.5;
public void Output()
{
Console.WriteLine("BaseClass : a={0}, DerivedClass:a={1}", base.a, a);
Console.WriteLine("BaseClass : b={0}, DerivedClass:b={1}", base.b, b);
}
}

class Program
{
static void Main(string[] args)
{
DerivedClass obj = new DerivedClass();
obj.Output();
}
}
}


7.
인 측은지심
의 수오지심
예 사양지심
지 시비지심
신 광명지심
중 적당히





출처:https://slaner.tistory.com/69
    :https://synk.tistory.com/7